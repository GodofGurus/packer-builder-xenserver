# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
    go get github.com/xenserver/packer-builder-xenserver/builder/xenserver/iso
    go get github.com/mitchellh/packer/packer/plugin
    go get github.com/xenserver/packer-builder-xenserver/plugin/builder-xenserver-xva
    go get github.com/mitchellh/go-vnc
    echo 'current working directory is'
    cd pwd 
    echo 'changing to'
    cd $(GOPATH)
    cd pwd
    mkdir ./src/github.com/GodofGurus/packer-builder-xenserver
    git clone https://github.com/GodofGurus/packer-builder-xenserver.git  ./src/github.com/GodofGurus/packer-builder-xenserver
    cd src/github.com/GodofGurus/packer-builder-xenserver
    # Determine the arch/os combos we're building for
    XC_OS=${XC_OS:-$(go env GOOS)}
    XC_ARCH=${XC_ARCH:-$(go env GOARCH)}
    GOPATH=${GOPATH:-$(go env GOPATH)}

    # Delete the old dir
    echo "==> Removing old directory..."
    rm -f bin/*
    rm -rf pkg/*
    rm -rf $GOPATH/pkg/*
    mkdir -p bin/

    # Fix for ./build.sh: gox: command not found
    go get github.com/mitchellh/gox

    gox \
        -os="${XC_OS}" \
        -arch="${XC_ARCH}" \
        -output "pkg/{{.OS}}_{{.Arch}}/packer-{{.Dir}}" \
        ./... \
        || exit 1

    # Move all the compiled things to the $GOPATH/bin
    GOPATH=${GOPATH:-$(go env GOPATH)}
    case $(uname) in
        CYGWIN*)
            GOPATH="$(cygpath $GOPATH)"
            ;;
    esac
    OLDIFS=$IFS
    IFS=: MAIN_GOPATH=($GOPATH)
    IFS=$OLDIFS

    # Copy our OS/Arch to the bin/ directory
    echo "==> Copying binaries for this platform..."
    DEV_PLATFORM="./pkg/$(go env GOOS)_$(go env GOARCH)"
    for F in $(find ${DEV_PLATFORM} -mindepth 1 -maxdepth 1 -type f); do
        cp ${F} bin/
        cp ${F} ${MAIN_GOPATH}/bin/
    done

    # Done!
    echo
    echo "==> Results:"
    ls -hl bin/
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      
      echo 'Hello world'
      echo $(modulePath)
      go get github.com/mitchellh/gox
      cd $(modulePath)
      pushd $(GOPATH)
      pwd
      ./build.sh
    workingDirectory: '$(modulePath)'

